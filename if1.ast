TranslationUnitDecl 0x1eb3270 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1eb3768 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1eb34c0 '__int128'
|-TypedefDecl 0x1eb37c8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1eb34e0 'unsigned __int128'
|-TypedefDecl 0x1eb3858 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1eb3820 'char *'
|   `-BuiltinType 0x1eb3300 'char'
|-TypedefDecl 0x1eb3b08 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x1eb3ab0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x1eb3930 'struct __va_list_tag'
|     `-Record 0x1eb38a8 '__va_list_tag'
`-FunctionDecl 0x1eb3ba8 </home/paul/clang-ast/if1.c:1:1, line:8:1> line:1:1 fred 'int ()'
  `-CompoundStmt 0x1eff370 <col:7, line:8:1>
    |-DeclStmt 0x1eb3d00 <line:2:1, col:6>
    | `-VarDecl 0x1eb3ca0 <col:1, col:5> col:5 used y 'int'
    |-DeclStmt 0x1eb3d88 <line:3:1, col:6>
    | `-VarDecl 0x1eb3d28 <col:1, col:5> col:5 used x 'int'
    |-BinaryOperator 0x1eb3de8 <line:4:1, col:3> 'int' '='
    | |-DeclRefExpr 0x1eb3da0 <col:1> 'int' lvalue Var 0x1eb3ca0 'y' 'int'
    | `-IntegerLiteral 0x1eb3dc8 <col:3> 'int' 9
    |-BinaryOperator 0x1eb3e58 <line:5:1, col:3> 'int' '='
    | |-DeclRefExpr 0x1eb3e10 <col:1> 'int' lvalue Var 0x1eb3d28 'x' 'int'
    | `-IntegerLiteral 0x1eb3e38 <col:3> 'int' 4
    `-IfStmt 0x1eff340 <line:6:1, line:7:6>
      |-<<<NULL>>>
      |-BinaryOperator 0x1eb3ee0 <line:6:5, col:8> 'int' '=='
      | |-ImplicitCastExpr 0x1eb3ec8 <col:5> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x1eb3e80 <col:5> 'int' lvalue Var 0x1eb3ca0 'y' 'int'
      | `-IntegerLiteral 0x1eb3ea8 <col:8> 'int' 9
      |-BinaryOperator 0x1eb3f50 <line:7:4, col:6> 'int' '='
      | |-DeclRefExpr 0x1eb3f08 <col:4> 'int' lvalue Var 0x1eb3d28 'x' 'int'
      | `-IntegerLiteral 0x1eb3f30 <col:6> 'int' 7
      `-<<<NULL>>>
