TranslationUnitDecl 0x31e9270 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x31e9768 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x31e94c0 '__int128'
|-TypedefDecl 0x31e97c8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x31e94e0 'unsigned __int128'
|-TypedefDecl 0x31e9858 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x31e9820 'char *'
|   `-BuiltinType 0x31e9300 'char'
|-TypedefDecl 0x31e9b08 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x31e9ab0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x31e9930 'struct __va_list_tag'
|     `-Record 0x31e98a8 '__va_list_tag'
`-FunctionDecl 0x31e9ba8 </home/paul/clang-ast/if2.c:1:1, line:9:1> line:1:1 fred 'int ()'
  `-CompoundStmt 0x3235380 <col:7, line:9:1>
    |-DeclStmt 0x31e9d20 <line:2:1, col:8>
    | `-VarDecl 0x31e9ca0 <col:1, col:7> col:5 used y 'int' cinit
    |   `-IntegerLiteral 0x31e9d00 <col:7> 'int' 9
    |-DeclStmt 0x31e9da8 <line:3:1, col:6>
    | `-VarDecl 0x31e9d48 <col:1, col:5> col:5 used x 'int'
    |-BinaryOperator 0x31e9e08 <line:4:1, col:3> 'int' '='
    | |-DeclRefExpr 0x31e9dc0 <col:1> 'int' lvalue Var 0x31e9d48 'x' 'int'
    | `-IntegerLiteral 0x31e9de8 <col:3> 'int' 4
    `-IfStmt 0x3235350 <line:5:1, line:8:6>
      |-<<<NULL>>>
      |-BinaryOperator 0x31e9e90 <line:5:5, col:8> 'int' '=='
      | |-ImplicitCastExpr 0x31e9e78 <col:5> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x31e9e30 <col:5> 'int' lvalue Var 0x31e9ca0 'y' 'int'
      | `-IntegerLiteral 0x31e9e58 <col:8> 'int' 9
      |-BinaryOperator 0x31e9f00 <line:6:4, col:6> 'int' '='
      | |-DeclRefExpr 0x31e9eb8 <col:4> 'int' lvalue Var 0x31e9d48 'x' 'int'
      | `-IntegerLiteral 0x31e9ee0 <col:6> 'int' 7
      `-BinaryOperator 0x31e9f70 <line:8:4, col:6> 'int' '='
        |-DeclRefExpr 0x31e9f28 <col:4> 'int' lvalue Var 0x31e9d48 'x' 'int'
        `-IntegerLiteral 0x31e9f50 <col:6> 'int' 3
