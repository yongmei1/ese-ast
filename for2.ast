TranslationUnitDecl 0x2f30270 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2f30768 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2f304c0 '__int128'
|-TypedefDecl 0x2f307c8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2f304e0 'unsigned __int128'
|-TypedefDecl 0x2f30858 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2f30820 'char *'
|   `-BuiltinType 0x2f30300 'char'
|-TypedefDecl 0x2f30b08 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x2f30ab0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x2f30930 'struct __va_list_tag'
|     `-Record 0x2f308a8 '__va_list_tag'
`-FunctionDecl 0x2f30ba8 </home/paul/clang-ast/for2.c:1:1, line:7:1> line:1:1 fred 'int ()'
  `-CompoundStmt 0x2f7c4b0 <col:7, line:7:1>
    |-DeclStmt 0x2f30d00 <line:2:1, col:6>
    | `-VarDecl 0x2f30ca0 <col:1, col:5> col:5 used y 'int'
    |-DeclStmt 0x2f30d88 <line:3:1, col:6>
    | `-VarDecl 0x2f30d28 <col:1, col:5> col:5 used x 'int'
    |-BinaryOperator 0x2f30de8 <line:4:1, col:3> 'int' '='
    | |-DeclRefExpr 0x2f30da0 <col:1> 'int' lvalue Var 0x2f30d28 'x' 'int'
    | `-IntegerLiteral 0x2f30dc8 <col:3> 'int' 4
    `-ForStmt 0x2f7c478 <line:5:1, line:6:8>
      |-BinaryOperator 0x2f30e58 <line:5:6, col:8> 'int' '='
      | |-DeclRefExpr 0x2f30e10 <col:6> 'int' lvalue Var 0x2f30ca0 'y' 'int'
      | `-IntegerLiteral 0x2f30e38 <col:8> 'int' 9
      |-<<<NULL>>>
      |-BinaryOperator 0x2f30ee0 <col:10, col:12> 'int' '>'
      | |-ImplicitCastExpr 0x2f30ec8 <col:10> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x2f30e80 <col:10> 'int' lvalue Var 0x2f30ca0 'y' 'int'
      | `-IntegerLiteral 0x2f30ea8 <col:12> 'int' 2
      |-BinaryOperator 0x2f7c378 <col:14, col:18> 'int' '='
      | |-DeclRefExpr 0x2f30f08 <col:14> 'int' lvalue Var 0x2f30ca0 'y' 'int'
      | `-BinaryOperator 0x2f7c350 <col:16, col:18> 'int' '-'
      |   |-ImplicitCastExpr 0x2f30f78 <col:16> 'int' <LValueToRValue>
      |   | `-DeclRefExpr 0x2f30f30 <col:16> 'int' lvalue Var 0x2f30ca0 'y' 'int'
      |   `-IntegerLiteral 0x2f30f58 <col:18> 'int' 1
      `-BinaryOperator 0x2f7c450 <line:6:4, col:8> 'int' '='
        |-DeclRefExpr 0x2f7c3a0 <col:4> 'int' lvalue Var 0x2f30ca0 'y' 'int'
        `-BinaryOperator 0x2f7c428 <col:6, col:8> 'int' '-'
          |-ImplicitCastExpr 0x2f7c410 <col:6> 'int' <LValueToRValue>
          | `-DeclRefExpr 0x2f7c3c8 <col:6> 'int' lvalue Var 0x2f30ca0 'y' 'int'
          `-IntegerLiteral 0x2f7c3f0 <col:8> 'int' 1
