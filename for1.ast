TranslationUnitDecl 0x2b6a270 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2b6a768 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2b6a4c0 '__int128'
|-TypedefDecl 0x2b6a7c8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2b6a4e0 'unsigned __int128'
|-TypedefDecl 0x2b6a858 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2b6a820 'char *'
|   `-BuiltinType 0x2b6a300 'char'
|-TypedefDecl 0x2b6ab08 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x2b6aab0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x2b6a930 'struct __va_list_tag'
|     `-Record 0x2b6a8a8 '__va_list_tag'
`-FunctionDecl 0x2b6aba8 </home/paul/clang-ast/for1.c:1:1, line:8:1> line:1:1 fred 'int ()'
  `-CompoundStmt 0x2bb63d8 <col:7, line:8:1>
    |-DeclStmt 0x2b6ad00 <line:2:1, col:6>
    | `-VarDecl 0x2b6aca0 <col:1, col:5> col:5 used y 'int'
    |-DeclStmt 0x2b6ad88 <line:3:1, col:6>
    | `-VarDecl 0x2b6ad28 <col:1, col:5> col:5 used x 'int'
    |-BinaryOperator 0x2b6ade8 <line:4:1, col:3> 'int' '='
    | |-DeclRefExpr 0x2b6ada0 <col:1> 'int' lvalue Var 0x2b6aca0 'y' 'int'
    | `-IntegerLiteral 0x2b6adc8 <col:3> 'int' 9
    |-BinaryOperator 0x2b6ae58 <line:5:1, col:3> 'int' '='
    | |-DeclRefExpr 0x2b6ae10 <col:1> 'int' lvalue Var 0x2b6ad28 'x' 'int'
    | `-IntegerLiteral 0x2b6ae38 <col:3> 'int' 4
    `-ForStmt 0x2bb63a0 <line:6:1, line:7:8>
      |-<<<NULL>>>
      |-<<<NULL>>>
      |-BinaryOperator 0x2b6aee0 <line:6:7, col:9> 'int' '>'
      | |-ImplicitCastExpr 0x2b6aec8 <col:7> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x2b6ae80 <col:7> 'int' lvalue Var 0x2b6aca0 'y' 'int'
      | `-IntegerLiteral 0x2b6aea8 <col:9> 'int' 2
      |-<<<NULL>>>
      `-BinaryOperator 0x2bb6378 <line:7:4, col:8> 'int' '='
        |-DeclRefExpr 0x2b6af08 <col:4> 'int' lvalue Var 0x2b6aca0 'y' 'int'
        `-BinaryOperator 0x2bb6350 <col:6, col:8> 'int' '-'
          |-ImplicitCastExpr 0x2b6af78 <col:6> 'int' <LValueToRValue>
          | `-DeclRefExpr 0x2b6af30 <col:6> 'int' lvalue Var 0x2b6aca0 'y' 'int'
          `-IntegerLiteral 0x2b6af58 <col:8> 'int' 1
