TranslationUnitDecl 0x2a4a260 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2a4a758 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2a4a4b0 '__int128'
|-TypedefDecl 0x2a4a7b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2a4a4d0 'unsigned __int128'
|-TypedefDecl 0x2a4a848 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2a4a810 'char *'
|   `-BuiltinType 0x2a4a2f0 'char'
|-TypedefDecl 0x2a4aaf8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x2a4aaa0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x2a4a920 'struct __va_list_tag'
|     `-Record 0x2a4a898 '__va_list_tag'
`-FunctionDecl 0x2a4ab98 </home/paul/clang-ast/if-compound1.c:1:1, line:13:1> line:1:1 ggg 'int ()'
  `-CompoundStmt 0x2a96620 <col:6, line:13:1>
    |-DeclStmt 0x2a4acf0 <line:2:1, col:6>
    | `-VarDecl 0x2a4ac90 <col:1, col:5> col:5 used y 'int'
    |-DeclStmt 0x2a4ad78 <line:3:1, col:7>
    | `-VarDecl 0x2a4ad18 <col:1, col:5> col:5 used y1 'int'
    |-BinaryOperator 0x2a4add8 <line:4:1, col:3> 'int' '='
    | |-DeclRefExpr 0x2a4ad90 <col:1> 'int' lvalue Var 0x2a4ac90 'y' 'int'
    | `-IntegerLiteral 0x2a4adb8 <col:3> 'int' 0
    |-BinaryOperator 0x2a4ae48 <line:5:1, col:4> 'int' '='
    | |-DeclRefExpr 0x2a4ae00 <col:1> 'int' lvalue Var 0x2a4ad18 'y1' 'int'
    | `-IntegerLiteral 0x2a4ae28 <col:4> 'int' 0
    `-IfStmt 0x2a965f0 <line:6:1, line:12:1>
      |-<<<NULL>>>
      |-BinaryOperator 0x2a4af38 <line:6:5, col:11> 'int' '=='
      | |-ImplicitCastExpr 0x2a4af20 <col:5> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x2a4ae70 <col:5> 'int' lvalue Var 0x2a4ac90 'y' 'int'
      | `-BinaryOperator 0x2a4aef8 <col:8, col:11> 'int' '+'
      |   |-ImplicitCastExpr 0x2a4aee0 <col:8> 'int' <LValueToRValue>
      |   | `-DeclRefExpr 0x2a4ae98 <col:8> 'int' lvalue Var 0x2a4ad18 'y1' 'int'
      |   `-IntegerLiteral 0x2a4aec0 <col:11> 'int' 1
      |-BinaryOperator 0x2a96390 <col:14, col:16> 'int' '='
      | |-DeclRefExpr 0x2a4af60 <col:14> 'int' lvalue Var 0x2a4ac90 'y' 'int'
      | `-IntegerLiteral 0x2a96370 <col:16> 'int' 9
      `-CompoundStmt 0x2a965c0 <line:7:5, line:12:1>
        |-BinaryOperator 0x2a96400 <line:8:4, col:6> 'int' '='
        | |-DeclRefExpr 0x2a963b8 <col:4> 'int' lvalue Var 0x2a4ac90 'y' 'int'
        | `-IntegerLiteral 0x2a963e0 <col:6> 'int' 8
        |-BinaryOperator 0x2a96470 <line:9:4, col:8> 'int' '='
        | |-DeclRefExpr 0x2a96428 <col:4> 'int' lvalue Var 0x2a4ad18 'y1' 'int'
        | `-IntegerLiteral 0x2a96450 <col:8> 'int' 3
        `-IfStmt 0x2a96590 <line:10:4, line:11:9>
          |-<<<NULL>>>
          |-BinaryOperator 0x2a964f8 <line:10:8, col:14> 'int' '=='
          | |-ImplicitCastExpr 0x2a964e0 <col:8> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x2a96498 <col:8> 'int' lvalue Var 0x2a4ad18 'y1' 'int'
          | `-IntegerLiteral 0x2a964c0 <col:14> 'int' 3
          |-BinaryOperator 0x2a96568 <line:11:6, col:9> 'int' '='
          | |-DeclRefExpr 0x2a96520 <col:6> 'int' lvalue Var 0x2a4ad18 'y1' 'int'
          | `-IntegerLiteral 0x2a96548 <col:9> 'int' 2
          `-<<<NULL>>>
